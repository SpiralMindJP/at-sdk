// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DashboardServiceClient is the client API for DashboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardServiceClient interface {
	// ダッシュボード情報を取得します。
	// 取得するダッシュボードのチームIDを指定した DashboardRequest を渡します。
	// ダッシュボード情報を設定した Dashboard が返ります。
	Get(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*Dashboard, error)
	// ダッシュボードのイベントを取得します。
	// 取得するダッシュボードイベントのチームIDを指定した DashboardRequest を渡します。
	// イベントが発生する度に、イベントデータを設定した DashboardEvent が返ります。
	EventStream(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (DashboardService_EventStreamClient, error)
	// ルームに入室します。
	// 入室するオエペレーターのデバイスIDとルームIDを指定した JoinRoomRequest を渡します。
	// JoinRoomRequest の force に True を指定すると、既に入室しているデバイスを強制的に退室させ、入室を行います。
	// 入室したルームのルーム状態を設定した RoomState が返ります。
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*RoomState, error)
	// ルームから退室します。
	// 退室するオエペレーターのデバイスIDとルームIDを指定した LeaveRoomRequest を渡します。
	// 退室したルームのルーム状態を設定した RoomState が返ります。
	LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*RoomState, error)
	// コンテンツを再生します。
	// コンテンツを再生するコンテンツIDとルームに入室しているデバイスのデバイスIDを設定した PlayContentRequest を渡します。
	PlayContent(ctx context.Context, in *PlayContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// コンテンツを停止します。
	// コンテンツを停止するルームに入室しているデバイスのデバイスIDを設定した StopContentRequest を渡します。
	StopContent(ctx context.Context, in *StopContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// アニメーションを再生します。
	// 再生するアニメーションコンテンツのコンテンツIDとアニメーション番号、ルームに入室しているデバイスのデバイスIDを設定した PlayAnimationRequest を渡します。
	PlayAnimation(ctx context.Context, in *PlayAnimationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// アニメーションを停止します。
	// アニメーションを停止するルームに入室しているデバイスのデバイスIDを設定した StopAnimationRequest を渡します。
	StopAnimation(ctx context.Context, in *StopAnimationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ビデオストリームを取得します。
	// ビデオストリームを取得するルームのルームIDを指定した VideoStreamRequest を渡します。
	// 各フレームを格納した VideoFrame が返ります。
	VideoStream(ctx context.Context, in *VideoStreamRequest, opts ...grpc.CallOption) (DashboardService_VideoStreamClient, error)
}

type dashboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardServiceClient(cc grpc.ClientConnInterface) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) Get(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, "/at_core_service.DashboardService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) EventStream(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (DashboardService_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DashboardService_serviceDesc.Streams[0], "/at_core_service.DashboardService/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dashboardServiceEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DashboardService_EventStreamClient interface {
	Recv() (*DashboardEvent, error)
	grpc.ClientStream
}

type dashboardServiceEventStreamClient struct {
	grpc.ClientStream
}

func (x *dashboardServiceEventStreamClient) Recv() (*DashboardEvent, error) {
	m := new(DashboardEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dashboardServiceClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*RoomState, error) {
	out := new(RoomState)
	err := c.cc.Invoke(ctx, "/at_core_service.DashboardService/JoinRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*RoomState, error) {
	out := new(RoomState)
	err := c.cc.Invoke(ctx, "/at_core_service.DashboardService/LeaveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) PlayContent(ctx context.Context, in *PlayContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/at_core_service.DashboardService/PlayContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) StopContent(ctx context.Context, in *StopContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/at_core_service.DashboardService/StopContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) PlayAnimation(ctx context.Context, in *PlayAnimationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/at_core_service.DashboardService/PlayAnimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) StopAnimation(ctx context.Context, in *StopAnimationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/at_core_service.DashboardService/StopAnimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) VideoStream(ctx context.Context, in *VideoStreamRequest, opts ...grpc.CallOption) (DashboardService_VideoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DashboardService_serviceDesc.Streams[1], "/at_core_service.DashboardService/VideoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dashboardServiceVideoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DashboardService_VideoStreamClient interface {
	Recv() (*VideoFrame, error)
	grpc.ClientStream
}

type dashboardServiceVideoStreamClient struct {
	grpc.ClientStream
}

func (x *dashboardServiceVideoStreamClient) Recv() (*VideoFrame, error) {
	m := new(VideoFrame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DashboardServiceServer is the server API for DashboardService service.
// All implementations must embed UnimplementedDashboardServiceServer
// for forward compatibility
type DashboardServiceServer interface {
	// ダッシュボード情報を取得します。
	// 取得するダッシュボードのチームIDを指定した DashboardRequest を渡します。
	// ダッシュボード情報を設定した Dashboard が返ります。
	Get(context.Context, *DashboardRequest) (*Dashboard, error)
	// ダッシュボードのイベントを取得します。
	// 取得するダッシュボードイベントのチームIDを指定した DashboardRequest を渡します。
	// イベントが発生する度に、イベントデータを設定した DashboardEvent が返ります。
	EventStream(*DashboardRequest, DashboardService_EventStreamServer) error
	// ルームに入室します。
	// 入室するオエペレーターのデバイスIDとルームIDを指定した JoinRoomRequest を渡します。
	// JoinRoomRequest の force に True を指定すると、既に入室しているデバイスを強制的に退室させ、入室を行います。
	// 入室したルームのルーム状態を設定した RoomState が返ります。
	JoinRoom(context.Context, *JoinRoomRequest) (*RoomState, error)
	// ルームから退室します。
	// 退室するオエペレーターのデバイスIDとルームIDを指定した LeaveRoomRequest を渡します。
	// 退室したルームのルーム状態を設定した RoomState が返ります。
	LeaveRoom(context.Context, *LeaveRoomRequest) (*RoomState, error)
	// コンテンツを再生します。
	// コンテンツを再生するコンテンツIDとルームに入室しているデバイスのデバイスIDを設定した PlayContentRequest を渡します。
	PlayContent(context.Context, *PlayContentRequest) (*emptypb.Empty, error)
	// コンテンツを停止します。
	// コンテンツを停止するルームに入室しているデバイスのデバイスIDを設定した StopContentRequest を渡します。
	StopContent(context.Context, *StopContentRequest) (*emptypb.Empty, error)
	// アニメーションを再生します。
	// 再生するアニメーションコンテンツのコンテンツIDとアニメーション番号、ルームに入室しているデバイスのデバイスIDを設定した PlayAnimationRequest を渡します。
	PlayAnimation(context.Context, *PlayAnimationRequest) (*emptypb.Empty, error)
	// アニメーションを停止します。
	// アニメーションを停止するルームに入室しているデバイスのデバイスIDを設定した StopAnimationRequest を渡します。
	StopAnimation(context.Context, *StopAnimationRequest) (*emptypb.Empty, error)
	// ビデオストリームを取得します。
	// ビデオストリームを取得するルームのルームIDを指定した VideoStreamRequest を渡します。
	// 各フレームを格納した VideoFrame が返ります。
	VideoStream(*VideoStreamRequest, DashboardService_VideoStreamServer) error
	mustEmbedUnimplementedDashboardServiceServer()
}

// UnimplementedDashboardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDashboardServiceServer struct {
}

func (UnimplementedDashboardServiceServer) Get(context.Context, *DashboardRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDashboardServiceServer) EventStream(*DashboardRequest, DashboardService_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedDashboardServiceServer) JoinRoom(context.Context, *JoinRoomRequest) (*RoomState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedDashboardServiceServer) LeaveRoom(context.Context, *LeaveRoomRequest) (*RoomState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedDashboardServiceServer) PlayContent(context.Context, *PlayContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayContent not implemented")
}
func (UnimplementedDashboardServiceServer) StopContent(context.Context, *StopContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContent not implemented")
}
func (UnimplementedDashboardServiceServer) PlayAnimation(context.Context, *PlayAnimationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayAnimation not implemented")
}
func (UnimplementedDashboardServiceServer) StopAnimation(context.Context, *StopAnimationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAnimation not implemented")
}
func (UnimplementedDashboardServiceServer) VideoStream(*VideoStreamRequest, DashboardService_VideoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method VideoStream not implemented")
}
func (UnimplementedDashboardServiceServer) mustEmbedUnimplementedDashboardServiceServer() {}

// UnsafeDashboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServiceServer will
// result in compilation errors.
type UnsafeDashboardServiceServer interface {
	mustEmbedUnimplementedDashboardServiceServer()
}

func RegisterDashboardServiceServer(s grpc.ServiceRegistrar, srv DashboardServiceServer) {
	s.RegisterService(&_DashboardService_serviceDesc, srv)
}

func _DashboardService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.DashboardService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).Get(ctx, req.(*DashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DashboardRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DashboardServiceServer).EventStream(m, &dashboardServiceEventStreamServer{stream})
}

type DashboardService_EventStreamServer interface {
	Send(*DashboardEvent) error
	grpc.ServerStream
}

type dashboardServiceEventStreamServer struct {
	grpc.ServerStream
}

func (x *dashboardServiceEventStreamServer) Send(m *DashboardEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _DashboardService_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.DashboardService/JoinRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.DashboardService/LeaveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).LeaveRoom(ctx, req.(*LeaveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_PlayContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).PlayContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.DashboardService/PlayContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).PlayContent(ctx, req.(*PlayContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_StopContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).StopContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.DashboardService/StopContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).StopContent(ctx, req.(*StopContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_PlayAnimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayAnimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).PlayAnimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.DashboardService/PlayAnimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).PlayAnimation(ctx, req.(*PlayAnimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_StopAnimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAnimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).StopAnimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.DashboardService/StopAnimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).StopAnimation(ctx, req.(*StopAnimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_VideoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VideoStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DashboardServiceServer).VideoStream(m, &dashboardServiceVideoStreamServer{stream})
}

type DashboardService_VideoStreamServer interface {
	Send(*VideoFrame) error
	grpc.ServerStream
}

type dashboardServiceVideoStreamServer struct {
	grpc.ServerStream
}

func (x *dashboardServiceVideoStreamServer) Send(m *VideoFrame) error {
	return x.ServerStream.SendMsg(m)
}

var _DashboardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "at_core_service.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DashboardService_Get_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _DashboardService_JoinRoom_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _DashboardService_LeaveRoom_Handler,
		},
		{
			MethodName: "PlayContent",
			Handler:    _DashboardService_PlayContent_Handler,
		},
		{
			MethodName: "StopContent",
			Handler:    _DashboardService_StopContent_Handler,
		},
		{
			MethodName: "PlayAnimation",
			Handler:    _DashboardService_PlayAnimation_Handler,
		},
		{
			MethodName: "StopAnimation",
			Handler:    _DashboardService_StopAnimation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _DashboardService_EventStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VideoStream",
			Handler:       _DashboardService_VideoStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dashboard.proto",
}

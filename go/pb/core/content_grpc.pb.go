// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	// コンテンツのリストを取得します。
	// 取得するコンテンツのチームIDを指定した ContentListRequest を渡します。
	// 指定されたチームIDのコンテンツのリストが設定された Contents が返ります。
	List(ctx context.Context, in *ContentListRequest, opts ...grpc.CallOption) (*Contents, error)
	// 指定されたコンテンツタイプのコンテンツのリストを取得します。
	// 取得するコンテンツのチームIDとコンテンツタイプを指定した ContentListByTypeRequest を渡します。
	// 指定されたチームIDとコンテンツタイプのコンテンツのリストが設定された Contents が返ります。
	ListContentType(ctx context.Context, in *ContentListByTypeRequest, opts ...grpc.CallOption) (*Contents, error)
	// コンテンツを取得します。
	// 取得するコンテンツのコンテンツIDを指定した ContentRequest を渡します。
	// コンテンツが存在する場合、Content が返ります。
	Get(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*Content, error)
	// コンテンツをアップロードします。
	// チームID、アップロードするコンテンツのコンテンツ名とコンテンツタイプを指定した ContentUploadRequest を渡します。
	// アップロードを行うための URL が設定された ContentUploadURL が返ります。
	// このURLにコンテンツデータをHTTP POSTメソッドで転送することで、アップロードが行われます。
	// アップロード完了後、FinishUpload メソッドでアップロードの完了を登録します。
	Upload(ctx context.Context, in *ContentUploadRequest, opts ...grpc.CallOption) (*ContentUploadURL, error)
	// コンテンツのアップロード完了を登録します。
	// チームID、コンテンツID、アップロードしたコンテンツのMD5ハッシュを指定した FinishUploadRequest を渡します。
	// 登録に成功すると Content が返ります。
	FinishUpload(ctx context.Context, in *FinishUploadRequest, opts ...grpc.CallOption) (*Content, error)
	// コンテンツを更新します。
	// 更新するコンテンツのコンテンツIDと、新しいコンテンツ名を指定した ContentUpdateRequest を渡します。
	// コンテンツの作成に成功すると、Content が返ります。
	Update(ctx context.Context, in *ContentUpdateRequest, opts ...grpc.CallOption) (*Content, error)
	// コンテンツを削除します。
	// 削除するコンテンツのコンテンツIDを指定した ContentRequest を渡します。
	Delete(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) List(ctx context.Context, in *ContentListRequest, opts ...grpc.CallOption) (*Contents, error) {
	out := new(Contents)
	err := c.cc.Invoke(ctx, "/at_core_service.ContentService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ListContentType(ctx context.Context, in *ContentListByTypeRequest, opts ...grpc.CallOption) (*Contents, error) {
	out := new(Contents)
	err := c.cc.Invoke(ctx, "/at_core_service.ContentService/ListContentType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Get(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/at_core_service.ContentService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Upload(ctx context.Context, in *ContentUploadRequest, opts ...grpc.CallOption) (*ContentUploadURL, error) {
	out := new(ContentUploadURL)
	err := c.cc.Invoke(ctx, "/at_core_service.ContentService/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) FinishUpload(ctx context.Context, in *FinishUploadRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/at_core_service.ContentService/FinishUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Update(ctx context.Context, in *ContentUpdateRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/at_core_service.ContentService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Delete(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/at_core_service.ContentService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	// コンテンツのリストを取得します。
	// 取得するコンテンツのチームIDを指定した ContentListRequest を渡します。
	// 指定されたチームIDのコンテンツのリストが設定された Contents が返ります。
	List(context.Context, *ContentListRequest) (*Contents, error)
	// 指定されたコンテンツタイプのコンテンツのリストを取得します。
	// 取得するコンテンツのチームIDとコンテンツタイプを指定した ContentListByTypeRequest を渡します。
	// 指定されたチームIDとコンテンツタイプのコンテンツのリストが設定された Contents が返ります。
	ListContentType(context.Context, *ContentListByTypeRequest) (*Contents, error)
	// コンテンツを取得します。
	// 取得するコンテンツのコンテンツIDを指定した ContentRequest を渡します。
	// コンテンツが存在する場合、Content が返ります。
	Get(context.Context, *ContentRequest) (*Content, error)
	// コンテンツをアップロードします。
	// チームID、アップロードするコンテンツのコンテンツ名とコンテンツタイプを指定した ContentUploadRequest を渡します。
	// アップロードを行うための URL が設定された ContentUploadURL が返ります。
	// このURLにコンテンツデータをHTTP POSTメソッドで転送することで、アップロードが行われます。
	// アップロード完了後、FinishUpload メソッドでアップロードの完了を登録します。
	Upload(context.Context, *ContentUploadRequest) (*ContentUploadURL, error)
	// コンテンツのアップロード完了を登録します。
	// チームID、コンテンツID、アップロードしたコンテンツのMD5ハッシュを指定した FinishUploadRequest を渡します。
	// 登録に成功すると Content が返ります。
	FinishUpload(context.Context, *FinishUploadRequest) (*Content, error)
	// コンテンツを更新します。
	// 更新するコンテンツのコンテンツIDと、新しいコンテンツ名を指定した ContentUpdateRequest を渡します。
	// コンテンツの作成に成功すると、Content が返ります。
	Update(context.Context, *ContentUpdateRequest) (*Content, error)
	// コンテンツを削除します。
	// 削除するコンテンツのコンテンツIDを指定した ContentRequest を渡します。
	Delete(context.Context, *ContentRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) List(context.Context, *ContentListRequest) (*Contents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedContentServiceServer) ListContentType(context.Context, *ContentListByTypeRequest) (*Contents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContentType not implemented")
}
func (UnimplementedContentServiceServer) Get(context.Context, *ContentRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedContentServiceServer) Upload(context.Context, *ContentUploadRequest) (*ContentUploadURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedContentServiceServer) FinishUpload(context.Context, *FinishUploadRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishUpload not implemented")
}
func (UnimplementedContentServiceServer) Update(context.Context, *ContentUpdateRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedContentServiceServer) Delete(context.Context, *ContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&_ContentService_serviceDesc, srv)
}

func _ContentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.ContentService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).List(ctx, req.(*ContentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ListContentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentListByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ListContentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.ContentService/ListContentType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ListContentType(ctx, req.(*ContentListByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.ContentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Get(ctx, req.(*ContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.ContentService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Upload(ctx, req.(*ContentUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_FinishUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).FinishUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.ContentService/FinishUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).FinishUpload(ctx, req.(*FinishUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.ContentService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Update(ctx, req.(*ContentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.ContentService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Delete(ctx, req.(*ContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "at_core_service.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ContentService_List_Handler,
		},
		{
			MethodName: "ListContentType",
			Handler:    _ContentService_ListContentType_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ContentService_Get_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _ContentService_Upload_Handler,
		},
		{
			MethodName: "FinishUpload",
			Handler:    _ContentService_FinishUpload_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ContentService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ContentService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content.proto",
}

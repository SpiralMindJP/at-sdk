// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AvatarServiceClient is the client API for AvatarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvatarServiceClient interface {
	// アバターリストを取得します。
	// 取得するアバターのチームIDを指定した AvatarListRequest を渡します。
	// 指定されたチームIDのアバターのリストが設定された Avatars が返ります。
	List(ctx context.Context, in *AvatarListRequest, opts ...grpc.CallOption) (*Avatars, error)
	// アバターを取得します。
	// 取得するアバターのアバターIDとチームIDを指定した AvatarRequest を渡します。
	// アバターが存在する場合、Avatar が返ります。
	Get(ctx context.Context, in *AvatarRequest, opts ...grpc.CallOption) (*Avatar, error)
	// 新しくアバターを作成します。
	// アバター名とアバターのコンテンツID、アニメーションのコンテンツID、チームIDを指定した AvatarCreateRequest を渡します。
	// アバターの作成に成功すると、アバターIDが設定さた Avatar が返ります。
	Create(ctx context.Context, in *AvatarCreateRequest, opts ...grpc.CallOption) (*Avatar, error)
	// アバターを更新します。
	// 更新するアバターのアバターIDとチームID、新しいアバター名、アバターのコンテンツID、アニメーションのコンテンツIDを指定した AvatarUpdateRequest を渡します。
	// アバターの作成に成功すると、Avatar が返ります。
	Update(ctx context.Context, in *AvatarUpdateRequest, opts ...grpc.CallOption) (*Avatar, error)
	// オペレーターデバイスのアバターを取得します。
	// 取得するオペレーターデバイスのデバイスIDを指定した OperatorAvatarRequest を渡します。
	// デバイスのアバターが設定されている場合、Avatar が返ります。
	GetByOperator(ctx context.Context, in *OperatorAvatarRequest, opts ...grpc.CallOption) (*Avatar, error)
	// アバターを削除します。
	// 削除するアバターのアバターIDとチームIDを指定した AvatarRequest を渡します。
	Delete(ctx context.Context, in *AvatarRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// オペレーターアバターリストを取得します。
	// 取得するオペレーターアバターのチームIDを指定した OperatorAvatarListRequest を渡します。
	// 指定されたチームIDのオペレーターアバターのリストが設定された OperatorAvatars が返ります。
	ListOperatorAvatar(ctx context.Context, in *OperatorAvatarListRequest, opts ...grpc.CallOption) (*OperatorAvatars, error)
	// オペレーターアバターを取得します。
	// 取得するオペレーターアバターのデバイスIDとチームIDを指定した OperatorAvatarRequest を渡します。
	// デバイスにオペレーターが設定されている場合、OperatorAvatar が返ります。
	GetOperatorAvatar(ctx context.Context, in *OperatorAvatarRequest, opts ...grpc.CallOption) (*OperatorAvatar, error)
	// オペレーターデバイスにアバターを設定します。
	// 設定するアバターのアバターIDと、設定するオペレーターデバイスのデバイスIDとチームIDを指定した OperatorAvatarSetRequest を渡します。
	// オペレーターデバイスへのアバターの設定に成功すると、OperatorAvatar が返ります。
	SetOperatorAvatar(ctx context.Context, in *OperatorAvatarSetRequest, opts ...grpc.CallOption) (*OperatorAvatar, error)
	// オペレーターデバイスに設定されたアバターを削除します。
	// 削除するオペレーターデバイスのデバイスIDとチームIDを指定した OperatorAvatarRequest を渡します。
	DeleteOperatorAvatar(ctx context.Context, in *OperatorAvatarRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type avatarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAvatarServiceClient(cc grpc.ClientConnInterface) AvatarServiceClient {
	return &avatarServiceClient{cc}
}

func (c *avatarServiceClient) List(ctx context.Context, in *AvatarListRequest, opts ...grpc.CallOption) (*Avatars, error) {
	out := new(Avatars)
	err := c.cc.Invoke(ctx, "/at_core_service.AvatarService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) Get(ctx context.Context, in *AvatarRequest, opts ...grpc.CallOption) (*Avatar, error) {
	out := new(Avatar)
	err := c.cc.Invoke(ctx, "/at_core_service.AvatarService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) Create(ctx context.Context, in *AvatarCreateRequest, opts ...grpc.CallOption) (*Avatar, error) {
	out := new(Avatar)
	err := c.cc.Invoke(ctx, "/at_core_service.AvatarService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) Update(ctx context.Context, in *AvatarUpdateRequest, opts ...grpc.CallOption) (*Avatar, error) {
	out := new(Avatar)
	err := c.cc.Invoke(ctx, "/at_core_service.AvatarService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) GetByOperator(ctx context.Context, in *OperatorAvatarRequest, opts ...grpc.CallOption) (*Avatar, error) {
	out := new(Avatar)
	err := c.cc.Invoke(ctx, "/at_core_service.AvatarService/GetByOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) Delete(ctx context.Context, in *AvatarRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/at_core_service.AvatarService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) ListOperatorAvatar(ctx context.Context, in *OperatorAvatarListRequest, opts ...grpc.CallOption) (*OperatorAvatars, error) {
	out := new(OperatorAvatars)
	err := c.cc.Invoke(ctx, "/at_core_service.AvatarService/ListOperatorAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) GetOperatorAvatar(ctx context.Context, in *OperatorAvatarRequest, opts ...grpc.CallOption) (*OperatorAvatar, error) {
	out := new(OperatorAvatar)
	err := c.cc.Invoke(ctx, "/at_core_service.AvatarService/GetOperatorAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) SetOperatorAvatar(ctx context.Context, in *OperatorAvatarSetRequest, opts ...grpc.CallOption) (*OperatorAvatar, error) {
	out := new(OperatorAvatar)
	err := c.cc.Invoke(ctx, "/at_core_service.AvatarService/SetOperatorAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) DeleteOperatorAvatar(ctx context.Context, in *OperatorAvatarRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/at_core_service.AvatarService/DeleteOperatorAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvatarServiceServer is the server API for AvatarService service.
// All implementations must embed UnimplementedAvatarServiceServer
// for forward compatibility
type AvatarServiceServer interface {
	// アバターリストを取得します。
	// 取得するアバターのチームIDを指定した AvatarListRequest を渡します。
	// 指定されたチームIDのアバターのリストが設定された Avatars が返ります。
	List(context.Context, *AvatarListRequest) (*Avatars, error)
	// アバターを取得します。
	// 取得するアバターのアバターIDとチームIDを指定した AvatarRequest を渡します。
	// アバターが存在する場合、Avatar が返ります。
	Get(context.Context, *AvatarRequest) (*Avatar, error)
	// 新しくアバターを作成します。
	// アバター名とアバターのコンテンツID、アニメーションのコンテンツID、チームIDを指定した AvatarCreateRequest を渡します。
	// アバターの作成に成功すると、アバターIDが設定さた Avatar が返ります。
	Create(context.Context, *AvatarCreateRequest) (*Avatar, error)
	// アバターを更新します。
	// 更新するアバターのアバターIDとチームID、新しいアバター名、アバターのコンテンツID、アニメーションのコンテンツIDを指定した AvatarUpdateRequest を渡します。
	// アバターの作成に成功すると、Avatar が返ります。
	Update(context.Context, *AvatarUpdateRequest) (*Avatar, error)
	// オペレーターデバイスのアバターを取得します。
	// 取得するオペレーターデバイスのデバイスIDを指定した OperatorAvatarRequest を渡します。
	// デバイスのアバターが設定されている場合、Avatar が返ります。
	GetByOperator(context.Context, *OperatorAvatarRequest) (*Avatar, error)
	// アバターを削除します。
	// 削除するアバターのアバターIDとチームIDを指定した AvatarRequest を渡します。
	Delete(context.Context, *AvatarRequest) (*emptypb.Empty, error)
	// オペレーターアバターリストを取得します。
	// 取得するオペレーターアバターのチームIDを指定した OperatorAvatarListRequest を渡します。
	// 指定されたチームIDのオペレーターアバターのリストが設定された OperatorAvatars が返ります。
	ListOperatorAvatar(context.Context, *OperatorAvatarListRequest) (*OperatorAvatars, error)
	// オペレーターアバターを取得します。
	// 取得するオペレーターアバターのデバイスIDとチームIDを指定した OperatorAvatarRequest を渡します。
	// デバイスにオペレーターが設定されている場合、OperatorAvatar が返ります。
	GetOperatorAvatar(context.Context, *OperatorAvatarRequest) (*OperatorAvatar, error)
	// オペレーターデバイスにアバターを設定します。
	// 設定するアバターのアバターIDと、設定するオペレーターデバイスのデバイスIDとチームIDを指定した OperatorAvatarSetRequest を渡します。
	// オペレーターデバイスへのアバターの設定に成功すると、OperatorAvatar が返ります。
	SetOperatorAvatar(context.Context, *OperatorAvatarSetRequest) (*OperatorAvatar, error)
	// オペレーターデバイスに設定されたアバターを削除します。
	// 削除するオペレーターデバイスのデバイスIDとチームIDを指定した OperatorAvatarRequest を渡します。
	DeleteOperatorAvatar(context.Context, *OperatorAvatarRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAvatarServiceServer()
}

// UnimplementedAvatarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAvatarServiceServer struct {
}

func (UnimplementedAvatarServiceServer) List(context.Context, *AvatarListRequest) (*Avatars, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAvatarServiceServer) Get(context.Context, *AvatarRequest) (*Avatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAvatarServiceServer) Create(context.Context, *AvatarCreateRequest) (*Avatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAvatarServiceServer) Update(context.Context, *AvatarUpdateRequest) (*Avatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAvatarServiceServer) GetByOperator(context.Context, *OperatorAvatarRequest) (*Avatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByOperator not implemented")
}
func (UnimplementedAvatarServiceServer) Delete(context.Context, *AvatarRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAvatarServiceServer) ListOperatorAvatar(context.Context, *OperatorAvatarListRequest) (*OperatorAvatars, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorAvatar not implemented")
}
func (UnimplementedAvatarServiceServer) GetOperatorAvatar(context.Context, *OperatorAvatarRequest) (*OperatorAvatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorAvatar not implemented")
}
func (UnimplementedAvatarServiceServer) SetOperatorAvatar(context.Context, *OperatorAvatarSetRequest) (*OperatorAvatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperatorAvatar not implemented")
}
func (UnimplementedAvatarServiceServer) DeleteOperatorAvatar(context.Context, *OperatorAvatarRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperatorAvatar not implemented")
}
func (UnimplementedAvatarServiceServer) mustEmbedUnimplementedAvatarServiceServer() {}

// UnsafeAvatarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvatarServiceServer will
// result in compilation errors.
type UnsafeAvatarServiceServer interface {
	mustEmbedUnimplementedAvatarServiceServer()
}

func RegisterAvatarServiceServer(s grpc.ServiceRegistrar, srv AvatarServiceServer) {
	s.RegisterService(&_AvatarService_serviceDesc, srv)
}

func _AvatarService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvatarListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.AvatarService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).List(ctx, req.(*AvatarListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.AvatarService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).Get(ctx, req.(*AvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvatarCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.AvatarService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).Create(ctx, req.(*AvatarCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvatarUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.AvatarService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).Update(ctx, req.(*AvatarUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_GetByOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).GetByOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.AvatarService/GetByOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).GetByOperator(ctx, req.(*OperatorAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.AvatarService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).Delete(ctx, req.(*AvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_ListOperatorAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorAvatarListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).ListOperatorAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.AvatarService/ListOperatorAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).ListOperatorAvatar(ctx, req.(*OperatorAvatarListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_GetOperatorAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).GetOperatorAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.AvatarService/GetOperatorAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).GetOperatorAvatar(ctx, req.(*OperatorAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_SetOperatorAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorAvatarSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).SetOperatorAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.AvatarService/SetOperatorAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).SetOperatorAvatar(ctx, req.(*OperatorAvatarSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_DeleteOperatorAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).DeleteOperatorAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.AvatarService/DeleteOperatorAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).DeleteOperatorAvatar(ctx, req.(*OperatorAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AvatarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "at_core_service.AvatarService",
	HandlerType: (*AvatarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _AvatarService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AvatarService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AvatarService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AvatarService_Update_Handler,
		},
		{
			MethodName: "GetByOperator",
			Handler:    _AvatarService_GetByOperator_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AvatarService_Delete_Handler,
		},
		{
			MethodName: "ListOperatorAvatar",
			Handler:    _AvatarService_ListOperatorAvatar_Handler,
		},
		{
			MethodName: "GetOperatorAvatar",
			Handler:    _AvatarService_GetOperatorAvatar_Handler,
		},
		{
			MethodName: "SetOperatorAvatar",
			Handler:    _AvatarService_SetOperatorAvatar_Handler,
		},
		{
			MethodName: "DeleteOperatorAvatar",
			Handler:    _AvatarService_DeleteOperatorAvatar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avatar.proto",
}

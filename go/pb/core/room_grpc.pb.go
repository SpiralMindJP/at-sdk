// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RoomServiceClient is the client API for RoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomServiceClient interface {
	// ルームを取得します。
	// 取得するルームのチームIDを指定した RoomListRequest を渡します。
	// 指定されたチームIDのルームのリストが設定された Rooms が返ります。
	List(ctx context.Context, in *RoomListRequest, opts ...grpc.CallOption) (*Rooms, error)
	// ルームを取得します。
	// 取得するルームのルームIDを指定した RoomRequest を渡します。
	// ルームが存在する場合、Room が返ります。
	Get(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*Room, error)
	// 新しくルームを作成します。
	// ルーム名とチームIDを指定した RoomCreateRequest を渡します。
	// ルームの作成に成功すると、ルームIDが設定さた Room が返ります。
	Create(ctx context.Context, in *RoomCreateRequest, opts ...grpc.CallOption) (*Room, error)
	// ルームを更新します。
	// 更新するルームのルームIDと、新しいルーム名を指定した RoomUpdateRequest を渡します。
	// ルームの作成に成功すると、Room が返ります。
	Update(ctx context.Context, in *RoomUpdateRequest, opts ...grpc.CallOption) (*Room, error)
	// ルームにカスタマーデバイスを設定します。
	// 設定するルームのルームIDと、設定するカスタマーデバイスのデバイスIDを指定した RoomDeviceRequest を渡します。
	// RoomDeviceRequest の force に True を指定すると、他のルームに既に設定されているデバイスであっても、設定します。
	// カスタマーデバイスの設定に成功すると、Room が返ります。
	SetDevice(ctx context.Context, in *RoomDeviceRequest, opts ...grpc.CallOption) (*Room, error)
	// ルームに設定されたカスタマーデバイスを削除します。
	// カスタマーデバイスを削除するルームのルームIDを指定した RoomRequest を渡します。
	// カスタマーデバイスの削除に成功すると、Room が返ります。
	DeleteDevice(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*Room, error)
	// ルームを削除します。
	// 削除するルームのルームIDを指定した RoomRequest を渡します。
	Delete(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomServiceClient(cc grpc.ClientConnInterface) RoomServiceClient {
	return &roomServiceClient{cc}
}

func (c *roomServiceClient) List(ctx context.Context, in *RoomListRequest, opts ...grpc.CallOption) (*Rooms, error) {
	out := new(Rooms)
	err := c.cc.Invoke(ctx, "/at_core_service.RoomService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) Get(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/at_core_service.RoomService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) Create(ctx context.Context, in *RoomCreateRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/at_core_service.RoomService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) Update(ctx context.Context, in *RoomUpdateRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/at_core_service.RoomService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) SetDevice(ctx context.Context, in *RoomDeviceRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/at_core_service.RoomService/SetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) DeleteDevice(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/at_core_service.RoomService/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) Delete(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/at_core_service.RoomService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServiceServer is the server API for RoomService service.
// All implementations must embed UnimplementedRoomServiceServer
// for forward compatibility
type RoomServiceServer interface {
	// ルームを取得します。
	// 取得するルームのチームIDを指定した RoomListRequest を渡します。
	// 指定されたチームIDのルームのリストが設定された Rooms が返ります。
	List(context.Context, *RoomListRequest) (*Rooms, error)
	// ルームを取得します。
	// 取得するルームのルームIDを指定した RoomRequest を渡します。
	// ルームが存在する場合、Room が返ります。
	Get(context.Context, *RoomRequest) (*Room, error)
	// 新しくルームを作成します。
	// ルーム名とチームIDを指定した RoomCreateRequest を渡します。
	// ルームの作成に成功すると、ルームIDが設定さた Room が返ります。
	Create(context.Context, *RoomCreateRequest) (*Room, error)
	// ルームを更新します。
	// 更新するルームのルームIDと、新しいルーム名を指定した RoomUpdateRequest を渡します。
	// ルームの作成に成功すると、Room が返ります。
	Update(context.Context, *RoomUpdateRequest) (*Room, error)
	// ルームにカスタマーデバイスを設定します。
	// 設定するルームのルームIDと、設定するカスタマーデバイスのデバイスIDを指定した RoomDeviceRequest を渡します。
	// RoomDeviceRequest の force に True を指定すると、他のルームに既に設定されているデバイスであっても、設定します。
	// カスタマーデバイスの設定に成功すると、Room が返ります。
	SetDevice(context.Context, *RoomDeviceRequest) (*Room, error)
	// ルームに設定されたカスタマーデバイスを削除します。
	// カスタマーデバイスを削除するルームのルームIDを指定した RoomRequest を渡します。
	// カスタマーデバイスの削除に成功すると、Room が返ります。
	DeleteDevice(context.Context, *RoomRequest) (*Room, error)
	// ルームを削除します。
	// 削除するルームのルームIDを指定した RoomRequest を渡します。
	Delete(context.Context, *RoomRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRoomServiceServer()
}

// UnimplementedRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoomServiceServer struct {
}

func (UnimplementedRoomServiceServer) List(context.Context, *RoomListRequest) (*Rooms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRoomServiceServer) Get(context.Context, *RoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRoomServiceServer) Create(context.Context, *RoomCreateRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoomServiceServer) Update(context.Context, *RoomUpdateRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRoomServiceServer) SetDevice(context.Context, *RoomDeviceRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDevice not implemented")
}
func (UnimplementedRoomServiceServer) DeleteDevice(context.Context, *RoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedRoomServiceServer) Delete(context.Context, *RoomRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRoomServiceServer) mustEmbedUnimplementedRoomServiceServer() {}

// UnsafeRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServiceServer will
// result in compilation errors.
type UnsafeRoomServiceServer interface {
	mustEmbedUnimplementedRoomServiceServer()
}

func RegisterRoomServiceServer(s grpc.ServiceRegistrar, srv RoomServiceServer) {
	s.RegisterService(&_RoomService_serviceDesc, srv)
}

func _RoomService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.RoomService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).List(ctx, req.(*RoomListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.RoomService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).Get(ctx, req.(*RoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.RoomService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).Create(ctx, req.(*RoomCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.RoomService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).Update(ctx, req.(*RoomUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_SetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).SetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.RoomService/SetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).SetDevice(ctx, req.(*RoomDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.RoomService/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).DeleteDevice(ctx, req.(*RoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.RoomService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).Delete(ctx, req.(*RoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoomService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "at_core_service.RoomService",
	HandlerType: (*RoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _RoomService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RoomService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RoomService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RoomService_Update_Handler,
		},
		{
			MethodName: "SetDevice",
			Handler:    _RoomService_SetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _RoomService_DeleteDevice_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RoomService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "room.proto",
}

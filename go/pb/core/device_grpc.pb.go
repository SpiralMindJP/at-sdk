// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	// デバイスのリストを取得します。
	// 取得するデバイスのチームIDを指定した DeviceListRequest を渡します。
	// 指定されたチームIDのデバイスのリストが設定された Devices が返ります。
	List(ctx context.Context, in *DeviceListRequest, opts ...grpc.CallOption) (*Devices, error)
	// 指定されたデバイスタイプのデバイスのリストを取得します。
	// 取得するデバイスのチームIDとデバイスタイプを指定した DeviceListByTypeRequest を渡します。
	// 指定されたチームIDのデバイスのリストが設定された Devices が返ります。
	ListByType(ctx context.Context, in *DeviceListByTypeRequest, opts ...grpc.CallOption) (*Devices, error)
	// デバイスを取得します。
	// 取得するデバイスのデバイスIDを指定した DeviceRequest を渡します。
	// デバイスが存在する場合、Device が返ります。
	Get(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// 新しくデバイスを登録します。
	// チームID、デバイス名、ワンタイムパスワードを指定した DeviceRegistrationRequest を渡します。
	// デバイスの作成に成功すると、デバイスID、デバイスタイプが設定さた Device が返ります。
	Register(ctx context.Context, in *DeviceRegistrationRequest, opts ...grpc.CallOption) (*Device, error)
	// デバイスを更新します。
	// 更新するデバイスのデバイスIDと、新しいデバイス名を指定した DeviceUpdateRequest を渡します。
	// デバイスの作成に成功すると、Device が返ります。
	Update(ctx context.Context, in *DeviceUpdateRequest, opts ...grpc.CallOption) (*Device, error)
	// デバイスを削除します。
	// 削除するデバイスのデバイスIDを指定した DeviceRequest を渡します。
	Delete(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) List(ctx context.Context, in *DeviceListRequest, opts ...grpc.CallOption) (*Devices, error) {
	out := new(Devices)
	err := c.cc.Invoke(ctx, "/at_core_service.DeviceService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) ListByType(ctx context.Context, in *DeviceListByTypeRequest, opts ...grpc.CallOption) (*Devices, error) {
	out := new(Devices)
	err := c.cc.Invoke(ctx, "/at_core_service.DeviceService/ListByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) Get(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/at_core_service.DeviceService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) Register(ctx context.Context, in *DeviceRegistrationRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/at_core_service.DeviceService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) Update(ctx context.Context, in *DeviceUpdateRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/at_core_service.DeviceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) Delete(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/at_core_service.DeviceService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	// デバイスのリストを取得します。
	// 取得するデバイスのチームIDを指定した DeviceListRequest を渡します。
	// 指定されたチームIDのデバイスのリストが設定された Devices が返ります。
	List(context.Context, *DeviceListRequest) (*Devices, error)
	// 指定されたデバイスタイプのデバイスのリストを取得します。
	// 取得するデバイスのチームIDとデバイスタイプを指定した DeviceListByTypeRequest を渡します。
	// 指定されたチームIDのデバイスのリストが設定された Devices が返ります。
	ListByType(context.Context, *DeviceListByTypeRequest) (*Devices, error)
	// デバイスを取得します。
	// 取得するデバイスのデバイスIDを指定した DeviceRequest を渡します。
	// デバイスが存在する場合、Device が返ります。
	Get(context.Context, *DeviceRequest) (*Device, error)
	// 新しくデバイスを登録します。
	// チームID、デバイス名、ワンタイムパスワードを指定した DeviceRegistrationRequest を渡します。
	// デバイスの作成に成功すると、デバイスID、デバイスタイプが設定さた Device が返ります。
	Register(context.Context, *DeviceRegistrationRequest) (*Device, error)
	// デバイスを更新します。
	// 更新するデバイスのデバイスIDと、新しいデバイス名を指定した DeviceUpdateRequest を渡します。
	// デバイスの作成に成功すると、Device が返ります。
	Update(context.Context, *DeviceUpdateRequest) (*Device, error)
	// デバイスを削除します。
	// 削除するデバイスのデバイスIDを指定した DeviceRequest を渡します。
	Delete(context.Context, *DeviceRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) List(context.Context, *DeviceListRequest) (*Devices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDeviceServiceServer) ListByType(context.Context, *DeviceListByTypeRequest) (*Devices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByType not implemented")
}
func (UnimplementedDeviceServiceServer) Get(context.Context, *DeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDeviceServiceServer) Register(context.Context, *DeviceRegistrationRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedDeviceServiceServer) Update(context.Context, *DeviceUpdateRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDeviceServiceServer) Delete(context.Context, *DeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&_DeviceService_serviceDesc, srv)
}

func _DeviceService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.DeviceService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).List(ctx, req.(*DeviceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_ListByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceListByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).ListByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.DeviceService/ListByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).ListByType(ctx, req.(*DeviceListByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.DeviceService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Get(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.DeviceService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Register(ctx, req.(*DeviceRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.DeviceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Update(ctx, req.(*DeviceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/at_core_service.DeviceService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).Delete(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "at_core_service.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _DeviceService_List_Handler,
		},
		{
			MethodName: "ListByType",
			Handler:    _DeviceService_ListByType_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DeviceService_Get_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _DeviceService_Register_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DeviceService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeviceService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device.proto",
}

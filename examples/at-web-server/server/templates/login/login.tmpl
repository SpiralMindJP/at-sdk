<!DOCTYPE html>
<html>
  {{template "htmlheader" .}}
  <body>
    {{template "header" .}}

    <div class="contents">
      <form id="login" class="inputform">
        <p id="errormsg" class="errormsg" disabled></p>
        <p class="input"><input id="username" type="email" name="username" placeholder="ユーザーID（Eメールアドレス）" required></p>
        <p class="input"><input id="password" type="password" name="password" placeholder="パスワード" required></p>
        <p class="submit"><input id="loginbtn" type="submit" value="ログイン"></p>
      </form>
    </div>

    <!-- The core Firebase JS SDK is always required and must be listed first -->
    <script src="https://www.gstatic.com/firebasejs/8.2.2/firebase-app.js"></script>

    <!-- TODO: Add SDKs for Firebase products that you want to use
    https://firebase.google.com/docs/web/setup#available-libraries -->
    <script src="https://www.gstatic.com/firebasejs/8.2.2/firebase-auth.js"></script>

    <script>
      // Your web app's Firebase configuration
      var firebaseConfig = {
          apiKey: "{{.Data.APIKey}}",
          authDomain: "{{.Data.AuthDomain}}",
          projectId: "{{.Data.ProjectID}}",
          storageBucket: "{{.Data.StorageBucket}}",
          messagingSenderId: "{{.Data.MessagingSenderID}}",
          appId: "{{.Data.AppID}}"
      };
      // Initialize Firebase
      firebase.initializeApp(firebaseConfig);
    </script>

    <script>
      firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE);

      const loginURL = "{{ .Data.LoginURL | safeurl }}";
      const redirectURL = "{{ .Data.RedirectURL | safeurl }}";
      const loginForm = document.getElementById('login');
      const username = document.getElementById('username');
      const password = document.getElementById('password');
      const loginbtn = document.getElementById('loginbtn');
      const errormsg = document.getElementById('errormsg');

      const hideErrorMsg = () => {
        errormsg.disabled = true;
      };

      const showErrorMsg = (msg) => {
        errormsg.innerText = msg;
        errormsg.disabled = false;
      };

      const setReadOnly = (readonly) => {
        username.readOnly = readonly;
        password.readOnly = readonly;
        loginbtn.readOnly = readonly;
      };

      let doingLogin = false;

      const loginWithToken = async (token) => {
        const response = await fetch(loginURL, {
          method: 'POST',
          mode: 'same-origin',
          cache: 'no-cache',
          headers: {
            'Content-Type': 'text/json',
          },
          redirect: 'follow',
          body: JSON.stringify({id_token: token}),
        });
        return response.json();
      };

      const login = async () => {
        const email = username.value;
        const pass = password.value;

        if (email == "") {
          showErrorMsg("ユーザーIDを入力してください。");
          return;
        }
        if (pass == "") {
          showErrorMsg("パスワードを入力してください。");
          return;
        }

        let user = null;
        try {
          const result = await firebase.auth().signInWithEmailAndPassword(email, pass);
          user = result.user;
        } catch (error) {
          var errorCode = error.code;
          var errorMessage = error.message;
          console.log(`${errorCode}: ${errorMessage}`);
          showErrorMsg("ユーザーIDまたはパスワードが正しくありません");
        }
        if (user == null) {
          return;
        }

        try {
          const token = await user.getIdToken();
          const result = await loginWithToken(token);
          if (result.status == 'success') {
            window.location.assign(redirectURL);
          } else {
            showErrorMsg("ログインに失敗しました。");
          }
        } catch (error) {
          console.log(error);
          showErrorMsg("ログインに失敗しました。");
          return;
        }
      };

      loginForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        hideErrorMsg();

        if (doingLogin) {
          return;
        }
        dooingLogin = true;
        setReadOnly(true);

        await login();

        dooingLogin = false;
        setReadOnly(false);
      });
    </script>
  </body>
</html>

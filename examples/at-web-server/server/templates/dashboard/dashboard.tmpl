<!DOCTYPE html>
<html>
  {{template "htmlheader" .}}
  <body>
    {{template "header" .}}

    <div class="contents">
      <div id="app" class="dashboard">
        <div class="mainbox">
          <h2 v-if="room">{{`{{room.name}}`}}</h2>
          <h2 v-else>&nbsp;</h2>
          <div v-if="room" class="roominfo">
            <div v-if="room.status == 'operating'">
              <p><room-status v-bind:status="room.status"></room-status> あなたが入室しています。</p>
              <p> <input type="button" value="退室" v-on:click="leaveRoom"></p>
            </div>
            <div v-else-if="room.status == 'others-operating'">
              <p><room-status v-bind:status="room.status"></room-status> 他のユーザーが入室しています。</p>
              <p><input type="button" v-bind:value="'「' + room.name + '」に入室'" v-on:click="joinRoom"></p>
            </div>
            <div v-else>
              <p><room-status v-bind:status="room.status"></room-status> 誰も入室していません。</p>
              <p><input type="button" v-bind:value="'「' + room.name + '」に入室'" v-on:click="joinRoom"></p>
            </div>
            <div v-if="content" class="contentinfo">
              <h3>{{`{{content.name}}`}}</h3>
              <p><input type="button" v-bind:value="'「' + content.name + '」を再生'" v-on:click="playContent(content.id)"><input type="button" value="コンテンツの再生を停止" v-on:click="stopContent"></p>
            </div>
          </div>
          <div v-else class="roominfo">
            <p>ルームが設定されていません。ルーム設定でルームを設定してくささい。</p>
          </div>
          <div v-else class="roominfo"></div>
          <div class="operation">
            <h3>コンテンツ</h3>
            <div class="contentslist">
              <table>
                <tr is="content-item" v-for="content in contents" :key="content.id" v-bind:content="content" v-bind:current-content-id="currentContentId" v-on:select="selectContent(content.id)"></tr>
              </table>
            </div>
          </div>
        </div>
        <div class="roombox">
          <h2>ルーム</h2>
          <div class="roomvideo">
            <room-image v-bind:room-id="currentRoomId" />
          </div>
          <div class="roomlist">
            <table>
              <tr is="room-item" v-for="room in rooms" :key="room.id" v-bind:room="room" v-bind:current-room-id="currentRoomId" v-on:select="selectRoom(room.id)"></tr>
            </table>
          </div>
        </div>
      </div>
    </div>
    <script>
    var eventStreamURL = "{{.Data.EventStreamURL | safeurl}}";
    Vue.component('room-status', {
      props: ['status'],
      computed: {
        iconClass: function() {
          return {
            'icon-operating': this.status=='operating',
            'icon-others-operating': this.status=='others-operating',
            'icon-not-operating': this.status=='not-operating'
          }
        }
      },
      template: `<i class="material-icons" v-bind:class="iconClass">account_circle</i>`
    })
    Vue.component('room-item', {
      props: ['room', 'currentRoomId'],
      template:
        `<tr v-bind:class="{selected: room.id == currentRoomId}" v-on:click="$emit('select')">` +
          `<td>{{`{{room.name}}`}}</td>` +
          `<td class="status">` +
            `<room-status v-bind:status="room.status"></room-status>` +
          `</td>` +
        `</tr>`
    })
    Vue.component('content-item', {
      props: ['content', 'currentContentId'],
      template:
        `<tr v-bind:class="{selected: content.id == currentContentId}" v-on:click="$emit('select')">` +
          `<td>{{`{{content.name}}`}}</td>` +
        `</tr>`
    })
    Vue.component('room-image', {
      props: ['roomId'],
      computed: {
        url: function() {
          if (!this.roomId) {
            return ''
          }
          if (this.roomId <= 0) {
            return ''
          }
          return '/dashboard/rooms/' + this.roomId + '/video'
        }
      },
      template: `<img v-bind:src="url" alt="room video">`
    })
    var app = new Vue({
      el: '#app',
      data: {
        room: null,
        rooms: [],
        currentRoomId: 0,
        content: null,
        contents: [],
        currentContentId: 0
      },
      created: function() {
        axios.get('/api/dashboard')
          .then((response) => {
            console.log(response)
            this.setDashboard(response.data)
            this.joinEventStream()
          })
          .catch((error) => {
            if (error.response.status == 401) {
              window.location.reload(true)
            }
            console.log(error)
          })
      },
      watch: {
        currentRoomId: function(newRoomId, oldRoomId) {
          this.setRoom(newRoomId)
        },
        currentContentId: function(newContentId, oldContentId) {
          var content = null
          if (this.contents) {
            for (let i = 0; i < this.contents.length; i++) {
              if (this.contents[i].id == newContentId) {
                content = this.contents[i]
                break
              }
            }
          }
          this.content = content
        }
      },
      methods: {
        selectRoom: function(id) {
          this.currentRoomId = id
        },
        setDashboard: function(data) {
          if (data.error) {
            alert(data.error.message)
          } else {
            this.rooms = data.rooms || []
            this.contents = data.contents || []
            this.selectInitialRoom()
          }
        },
        updateDashboard: function(data) {
          if (data.error) {
            alert(data.error.message)
          } else {
            if (data.room) {
              this.updateRoom(data.room)
            } else if (data.rooms) {
              this.rooms = data.rooms
              this.setRoom(this.currentRoomId)
            } else if (data.contents) {
              this.contents = data.contents || []
            }
          }
        },
        joinEventStream: function() {
          let socket = new WebSocket(eventStreamURL);
          socket.addEventListener('open', function(event) {
            console.log('event stream is opened');
          });
          socket.addEventListener('close', function(event) {
            console.log('event stream is closed');
          });
          socket.addEventListener('message', (event) => {
            let data = JSON.parse(event.data);
            console.log(data);
            switch (data.type) {
              case 0: // room created
                this.addRoom(data.room);
                break;
              case 1: // room deleted
                this.deleteRoom(data.room);
                break;
              case 10: // device joined
                this.updateRoom(data.room);
                break;
              case 11: // device leaved
                this.updateRoom(data.room);
                break;
              case 12: // device deleted
                break;
              case 20: // device offline
                break;
              case 21: // device online
            }
          });
          socket.addEventListener('error', function(event) {
            console.log('WebSocket error : ', event);
          });
        },
        addRoom: function(room) {
          if (this.rooms) {
            this.rooms.push(room);
          }
        },
        deleteRoom: function(room) {
          if (this.rooms) {
            for (let i = 0; i < this.rooms.length; i++) {
              if (this.rooms[i].id == room.id) {
                this.rooms.splice(i, 1);
                break;
              }
            }
          }
          if (this.room != null && this.room.id == room.id) {
            this.room = room;
          }
        },
        updateRoom: function(room) {
          if (this.rooms) {
            for (let i = 0; i < this.rooms.length; i++) {
              if (this.rooms[i].id == room.id) {
                Vue.set(this.rooms, i, room);
                break;
              }
            }
          }
          if (this.room != null && this.room.id == room.id) {
            this.room = room;
          }
        },
        setRoom: function(id) {
          var room = null
          if (this.rooms) {
            for (let i = 0; i < this.rooms.length; i++) {
              if (this.rooms[i].id == id) {
                room = this.rooms[i]
                break
              }
            }
          }
          this.room = room
        },
        selectContent: function(id) {
          this.currentContentId = id
        },
        joinRoom: function() {
          axios.post('/api/dashboard/rooms/' + this.currentRoomId + '/join')
            .then((response) => {
              console.log(response)
              this.updateDashboard(response.data)
            })
            .catch((error) => {
              if (error.response.status == 401) {
                window.location.reload(true)
              }
              console.log(error)
            })
        },
        leaveRoom: function() {
          axios.post('/api/dashboard/rooms/' + this.currentRoomId + '/leave')
            .then((response) => {
              console.log(response)
              this.updateDashboard(response.data)
            })
            .catch((error) => {
              if (error.response.status == 401) {
                window.location.reload(true)
              }
              console.log(error)
            })
        },
        selectInitialRoom: function() {
          var roomId = 0
          for (var i = 0; i < this.rooms.length; i++) {
            var room = this.rooms[i]
            if (room.status == 'operating') {
              roomId = room.id
              break
            }
          }
          if (roomId == 0 && this.rooms.length > 0) {
            roomId = this.rooms[0].id
          }
          this.currentRoomId = roomId
        },
        playContent: function(id) {
          axios.post('/api/dashboard/contents/' + id + '/play')
            .then((response) => {
              console.log(response)
              this.setDashboard(response.data)
            })
            .catch((error) => {
              if (error.response.status == 401) {
                window.location.reload(true)
              }
              console.log(error)
            })
        },
        stopContent: function() {
          axios.post('/api/dashboard/stop')
            .then((response) => {
              console.log(response)
              this.setDashboard(response.data)
            })
            .catch((error) => {
              if (error.response.status == 401) {
                window.location.reload(true)
              }
              console.log(error)
            })
        }
      }
    })
    </script>
  </body>
</html>

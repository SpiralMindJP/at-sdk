/*
 * Dashboard はダッシュボードに関する情報を操作します。
 */
syntax = "proto3";

option go_package = "github.com/SpiralMindJP/at-sdk/go/pb/core";

package at_core_service;

import "google/protobuf/empty.proto";
import "room.proto";
import "content.proto";

/*
 * ダッシュボードの情報を表します。
 */
message Dashboard {
  repeated Room             rooms       = 1; // ルームのリスト。
  repeated RoomState        room_states = 2; // ルーム状態のリスト。
  repeated DashboardContent contents    = 3; // コンテンツのリスト。
}

/*
 * ルームの状態を表します。
 */
message RoomState {
  int64 room_id = 1; // ルームID。

  int64 device_id = 11; // ルームに登録されたデバイスのデバイスID。

  repeated OperatorDevice operators = 21; // オペレーション中のオペレーターデバイスのリスト。
}

/*
 * オペレーターのデバイスを表します。
 */
message OperatorDevice {
  int64  device_id = 1; // デバイスID。
}

/*
 * ダッシュボードを取得する際のリクエストを表します。
 */
message DashboardRequest {
  int64 team_id = 1; // チームID。
}

/*
 * ダッシュボードのイベントのイベントタイプを表します。
 */
enum DashboardEventType {
  NO_EVENT   = 0; // なにもないイベント。
  JOIN_ROOM  = 1; // 何れかのオペレーターがルームに入室した。
  LEAVE_ROOM = 2; // 何れかのオペレーターがルームから退室した。
}

/*
 * ダッシュボードのイベントを表します。
 */
message DashboardEvent {
  DashboardEventType type = 1; // イベントタイプ

  // イベントデータ。
  oneof event_data {
    RoomState room_state = 11; // 入室または退室したルームの状態。
  }
}

/*
 * ルームの入室リクエストを表します。
 */
message JoinRoomRequest {
  int64 team_id   = 1; // チームID。
  int64 room_id   = 2; // 入室するルームのルームID。
  int64 device_id = 3; // 入室するオペレーターデバイスのデバイスID。
  bool  force     = 4; // 既に入室しているデバイスがある場合に、強制的に入室するかどうか。True の場合、既に入室しているデバイスを強制的に退室させ、入室を行います。(optional)
}

/*
 * ルームの退室リクエストを表します。
 */
message LeaveRoomRequest {
  int64 team_id   = 1; // チームID。
  int64 room_id   = 2; // 退室するルームのルームID。
  int64 device_id = 3; // 退室するオペレーターデバイスのデバイスID。
}

/*
 * ダッシュボードのコンテンツを表します。
 */
message DashboardContent {
  int64       content_id = 1; // コンテンツID。
  string      name       = 2; // コンテンツ名。
  ContentType type       = 3; // コンテンツタイプ。
}

/*
 * コンテンツ再生のリクエストを表します。
 */
message PlayContentRequest {
  int64 team_id    = 1; // チームID。
  int64 device_id  = 2; // コンテンツを再生するルームに入室しているデバイスのデバイスID。
  int64 content_id = 3; // 再生するコンテンツのコンテンツID。
}

/*
 * コンテンツ停止のリクエストを表します。
 */
message StopContentRequest {
  int64 team_id   = 1; // チームID。
  int64 device_id = 2; // コンテンツを停止するルームに入室しているデバイスのデバイスID。
}

/*
 * ビデオストリームを取得するリクエストを表します。
 */
message VideoStreamRequest {
  int64 team_id = 1; // チームID。
  int64 room_id = 2; // ストリームを取得するルームのルームID。
}

/*
 * ビデオストリームのビデオフレームを表します。
 */
message VideoFrame {
  VideoFrameType type    = 1; // ビデオフレームのタイプ。
  bytes          payload = 2; // ビデオフレームのペイロード。
}

/*
 * ビデオフレームのタイプを表します。
 */
enum VideoFrameType {
  VIDEO_FRAME_UNKOWN = 0; // 不明なフレーム
  VIDEO_FRAME_JPEG   = 1; // JPEG フレーム。
}

/*
 * ダッシュボードを操作するAPIを提供します。
 */
service DashboardService {
  // ダッシュボード情報を取得します。
  // 取得するダッシュボードのチームIDを指定した DashboardRequest を渡します。
  // ダッシュボード情報を設定した Dashboard が返ります。
  rpc Get(DashboardRequest) returns (Dashboard);

  // ダッシュボードのイベントを取得します。
  // 取得するダッシュボードイベントのチームIDを指定した DashboardRequest を渡します。
  // イベントが発生する度に、イベントデータを設定した DashboardEvent が返ります。
  rpc EventStream(DashboardRequest) returns (stream DashboardEvent);

  // ルームに入室します。
  // 入室するオエペレーターのデバイスIDとルームIDを指定した JoinRoomRequest を渡します。
  // JoinRoomRequest の force に True を指定すると、既に入室しているデバイスを強制的に退室させ、入室を行います。
  // 入室したルームのルーム状態を設定した RoomState が返ります。
  rpc JoinRoom(JoinRoomRequest) returns (RoomState);

  // ルームから退室します。
  // 退室するオエペレーターのデバイスIDとルームIDを指定した LeaveRoomRequest を渡します。
  // 退室したルームのルーム状態を設定した RoomState が返ります。
  rpc LeaveRoom(LeaveRoomRequest) returns (RoomState);

  // コンテンツを再生します。
  // コンテンツを再生するコンテンツIDとルームに入室しているデバイスのデバイスIDを設定した PlayContentRequest を渡します。
  rpc PlayContent(PlayContentRequest) returns (google.protobuf.Empty);

  // コンテンツを停止します。
  // コンテンツを停止するルームに入室しているデバイスのデバイスIDを設定した StopContentRequest を渡します。
  rpc StopContent(StopContentRequest) returns (google.protobuf.Empty);

  // ビデオストリームを取得します。
  // ビデオストリームを取得するルームのルームIDを指定した VideoStreamRequest を渡します。
  // 各フレームを格納した VideoFrame が返ります。
  rpc VideoStream(VideoStreamRequest) returns (stream VideoFrame);
}

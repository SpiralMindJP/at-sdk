/*
 * Avatar はアバターに関する情報を操作します。
 */
syntax = "proto3";

option go_package = "github.com/SpiralMindJP/at-sdk/go/pb/core";

package at.core;

import "common/common.proto";
import "google/protobuf/empty.proto";

/*
 * アバター情報リスト取得リクエストを表します。
 */
message GetAvatarsRequest {
  int64 team_id = 1; // チームID。
  bool  used_only = 2; // true を指定すると、Operator デバイスに設定されているアバターのみ取得します。
}

/*
 * アバター情報リスト取得レスポンスを表します。
 */
message GetAvatarsResponse {
  repeated at.common.Avatar avatars = 1; // アバターのリスト。
}

/*
 * アバター情報取得リクエストを表します。
 */
message GetAvatarRequest {
  int64 team_id   = 1; // チームID。
  int64 avatar_id = 2; // アバターID。
}

/*
 * アバター情報取得レスポンスを表します。
 */
message GetAvatarResponse {
  at.common.Avatar avatar = 1; // アバター情報。
}

/*
 * アバター作成リクエストを表します。
 */
message CreateAvatarRequest {
  int64                        team_id              = 1; // チームID。
  string                       name                 = 2; // アバター名称。
  int64                        avatar_content_id    = 3; // アバターのコンテンツID。
  int64                        animation_content_id = 4; // アニメーションのコンテンツID。
  repeated at.common.Animation animations           = 5; // アニメーションのリスト。
}

/*
 * アバター作成リクエストを表します。
 */
message CreateAvatarResponse {
  at.common.Avatar avatar = 1; // アバター情報。
}

/*
 * アバター更新リクエストを表します。
 */
message UpdateAvatarRequest {
  int64                        team_id              = 1; // チームID。
  int64                        avatar_id            = 2; // アバターID。
  string                       name                 = 3; // アバター名称。
  int64                        avatar_content_id    = 4; // アバターのコンテンツID。
  int64                        animation_content_id = 5; // アニメーションのコンテンツID。
  repeated at.common.Animation animations           = 6; // アニメーションのリスト。
}

/*
 * アバター更新リクエストを表します。
 */
message UpdateAvatarResponse {
  at.common.Avatar avatar = 1; // アバター情報。
}

/*
 * アバター削除リクエストを表します。
 */
message DeleteAvatarRequest {
  int64 team_id   = 1; // チームID。
  int64 avatar_id = 2; // アバターID。
}

/*
 * オペレーターアバター取得リクエストを表します。
 */
message GetOperatorAvatarRequest {
  int64 team_id   = 1; // チームID。
  int64 device_id = 2; // オペレーターデバイスのデバイスID。
}

/*
 * オペレーターアバター取得レスポンスを表します。
 */
message GetOperatorAvatarResponse {
  int64            team_id   = 1; // チームID。
  int64            device_id = 2; // オペレーターデバイスのデバイスID。
  at.common.Avatar avatar    = 3; // アバター情報。
}

/*
 * オペレーターデバイスへのアバター設定リクエストを表します。
 */
message SetOperatorAvatarRequest {
  int64 team_id   = 1; // チームID。
  int64 device_id = 2; // オペレーターデバイスのデバイスID。
  int64 avatar_id = 3; // アバターID。
}

/*
 * オペレーターデバイスへのアバター設定レスポンスを表します。
 */
message SetOperatorAvatarResponse {
  int64            team_id   = 1; // チームID。
  int64            device_id = 2; // オペレーターデバイスのデバイスID。
  at.common.Avatar avatar    = 3; // アバター情報。
}

/*
 * オペレーターデバイスからのアバター削除レスポンスを表します。
 */
message DeleteOperatorAvatarRequest {
  int64 team_id   = 1; // チームID。
  int64 device_id = 2; // オペレーターデバイスのデバイスID。
}
/*
 * アバター設定に関する情報を操作するAPIを提供します。
 */
service AvatarService {
  // アバター情報のリストを取得します。
  // 取得するアバターのチームIDを指定した GetAvatarsRequest を渡します。
  // used_only に true を指定すると、Operator デバイスに設定されているアバターのみ取得します。
  // 指定されたチームIDのアバター情報のリストが設定された GetAvatarsResponse が返ります。
  rpc GetAvatars(GetAvatarsRequest) returns (GetAvatarsResponse);
  // アバター情報を取得します。
  // 取得するアバターのアバターIDとチームIDを指定した GetAvatarRequest を渡します。
  // アバターが存在する場合、アバター情報が設定された GetAvatarResponse が返ります。
  rpc GetAvatar(GetAvatarRequest) returns (GetAvatarResponse);

  // 新しくアバターを作成します。
  // アバター名とアバターのコンテンツID、アニメーションのコンテンツID、チームIDを指定した CreateAvatarRequest を渡します。
  // アバターの作成に成功すると、作成したアバター情報が設定された CreateAvatarResponse が返ります。
  rpc CreateAvatar(CreateAvatarRequest) returns (CreateAvatarResponse);
  // アバター情報を更新します。
  // 更新するアバターのアバターIDとチームID、新しいアバター名、アバターのコンテンツID、アニメーションのコンテンツIDを指定した UpdateAvatarRequest を渡します。
  // アバターの更新に成功すると、更新したアバター情報が設定された UpdateAvatarResponse が返ります。
  rpc UpdateAvatar(UpdateAvatarRequest) returns (UpdateAvatarResponse);
  // アバターを削除します。
  // 削除するアバターのアバターIDとチームIDを指定した DeleteAvatarRequest を渡します。
  rpc DeleteAvatar(DeleteAvatarRequest) returns (google.protobuf.Empty);

  // オペレーターデバイスに設定されているアバター情報を取得します。
  // アバター情報を取得するオペレーターデバイスのデバイスIDとチームIDを指定した GetOperatorAvatarRequest を渡します。
  // デバイスにオペレーターが設定されている場合、OperatorAvatar が返ります。
  rpc GetOperatorAvatar(GetOperatorAvatarRequest) returns (GetOperatorAvatarResponse);
  // オペレーターデバイスにアバターを設定します。
  // 設定するアバターのアバターIDと、設定するオペレーターデバイスのデバイスIDとチームIDを指定した SetOperatorAvatarRequest を渡します。
  // オペレーターデバイスへのアバターの設定に成功すると、オペレーターアバター情報を設定した SetOperatorAvatarResponse が返ります。
  rpc SetOperatorAvatar(SetOperatorAvatarRequest) returns (SetOperatorAvatarResponse);
  // オペレーターデバイスに設定されたアバターを削除します。
  // 削除するオペレーターデバイスのデバイスIDとチームIDを指定した DeleteOperatorAvatarRequest を渡します。
  rpc DeleteOperatorAvatar(DeleteOperatorAvatarRequest) returns (google.protobuf.Empty);
}

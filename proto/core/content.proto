/*
 * Content はコンテンツに関する情報を操作します。
 */
syntax = "proto3";

option go_package = "github.com/SpiralMindJP/at-sdk/go/pb/core";

package at.core;

import "common/common.proto";
import "google/protobuf/empty.proto";

/*
 * コンテンツリスト取得リクエストを表します。
 */
message GetContentsRequest {
  int64                          team_id       = 1; // チームID。
  repeated at.common.ContentType content_types = 2; // コンテンツタイプのリスト。
}

/*
 * コンテンツリスト取得レスポンスを表します。
 */
message GetContentsResponse {
  repeated at.common.Content contents = 1; // コンテンツ情報のリスト。
}

/*
 * コンテンツ取得リクエストを表します。
 */
message GetContentRequest {
  int64 team_id    = 1; // チームID。
  int64 content_id = 2; // コンテンツID。
}

/*
 * コンテンツ取得レスポンスを表します。
 */
message GetContentResponse {
  at.common.Content content = 1; // コンテンツ情報。
}

/*
 * コンテンツアップロードリクエストを表します。
 */
message UploadContentRequest {
  int64                 team_id      = 1; // チームID。
  string                name         = 2; // コンテンツ名。
  at.common.ContentType content_type = 3; // コンテンツタイプ。
  string                file_name    = 4; // コンテンツのファイル名。
}

/*
 * コンテンツアップロードレスポンスを表します。
 */
message UploadContentResponse {
  int64  content_id = 1; // コンテンツID。
  string upload_url = 2; // コンテンツをアップロードするURL。
}

/*
 * コンテンツアップロード終了リクエストを表します。
 */
message FinishUploadContentRequest {
  int64       team_id    = 1; // チームID。
  int64       content_id = 2; // コンテンツID。
  bytes       md5        = 3; // MD5ハッシュ。
}

/*
 * コンテンツアップロード終了レスポンスを表します。
 */
message FinishUploadContentResponse {
  at.common.Content content = 1; // コンテンツ情報。
}

/*
 * コンテンツダウンロード情報取得リクエストを表します。
 */
message DownloadContentRequest {
  int64 team_id    = 1; // チームID。
  int64 content_id = 2; // コンテンツID。
}

/*
 * コンテンツダウンロード情報取得レスポンスを表します。
 */
message DownloadContentResponse {
  at.common.Content content      = 1; // コンテンツ。
  string            download_url = 2; // ダウンロードURL。
}

/*
 * コンテンツ更新リクエストを表します。
 */
message UpdateContentRequest {
  int64  team_id    = 1; // チームID。
  int64  content_id = 2; // コンテンツID。
  string name       = 3; // コンテンツ名。
}

/*
 * コンテンツ更新レスポンスを表します。
 */
message UpdateContentResponse {
  at.common.Content content = 1; // コンテンツ情報。
}

/*
 * コンテンツ削除リクエストを表します。
 */
message DeleteContentRequest {
  int64  team_id    = 1; // チームID。
  int64  content_id = 2; // コンテンツID。
}

/*
 * コンテンツを操作するAPIを提供します。
 */
service ContentService {
  // コンテンツのリストを取得します。
  // 取得するコンテンツのチームIDを指定した GetContentsRequest を渡します。
  // contents_types に1つ以上のコンテンツタイプを指定すると、指定されたコンテンツタイプのコンテンツのみ取得します。
  // 指定されたチームIDのコンテンツ情報のリストが設定された GetContentsResponse が返ります。
  rpc GetContents(GetContentsRequest) returns (GetContentsResponse);

  // コンテンツを取得します。
  // 取得するコンテンツのコンテンツIDを指定した GetContentRequest を渡します。
  // コンテンツが存在する場合、コンテンツ情報が設定された GetContentResponse が返ります。
  rpc GetContent(GetContentRequest) returns (GetContentResponse);

  // コンテンツをアップロードします。
  // チームID、アップロードするコンテンツのコンテンツ名とコンテンツタイプを指定した UploadContentRequest を渡します。
  // アップロードを行うための URL が設定された ContentUploadURL が返ります。
  // このURLにコンテンツデータをHTTP POSTメソッドで転送することで、アップロードが行われます。
  // アップロード完了後、FinishUpload メソッドでアップロードの完了を登録します。
  rpc UploadContent(UploadContentRequest) returns (UploadContentResponse);
  // コンテンツのアップロード完了を登録します。
  // チームID、コンテンツID、アップロードしたコンテンツのMD5ハッシュを指定した FinishUploadRequest を渡します。
  // 登録に成功すると Content が返ります。
  rpc FinishUploadContent(FinishUploadContentRequest) returns (FinishUploadContentResponse);
  // コンテンツをダウンロードするための情報を取得します。
  // ダウンロードするコンテンツのチームID、コンテンツIDを指定した、DownloadContentRequest を渡します。
  // コンテンツが存在する場合、コンテンツ情報とダウンロードURLが設定された DownloadContentResponse が返ります。
  rpc DownloadContent(DownloadContentRequest) returns (DownloadContentResponse);

  // コンテンツを更新します。
  // 更新するコンテンツのコンテンツIDと、新しいコンテンツ名を指定した ContentUpdateRequest を渡します。
  // コンテンツの作成に成功すると、Content が返ります。
  rpc UpdateContent(UpdateContentRequest) returns (UpdateContentResponse);
  // コンテンツを削除します。
  // 削除するコンテンツのコンテンツIDを指定した ContentRequest を渡します。
  rpc DeleteContent(DeleteContentRequest) returns (google.protobuf.Empty);
}
